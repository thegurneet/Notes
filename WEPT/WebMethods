
  ********************
    FIFO & LIFO
  ********************

        FIFO - First in, First Out.
              Method for handling data structures where the First element is processed first and the Newest element is processed last.
                  - Like a queue for a cinema ticket.

                    FIFO approach is used as an operating system algorithm, which gives every process CU time in the order they arrive.


        LIFO - Last in , First Out. or FILO - First in Last out.
              Method for handling data structures where the last element is processed first and the first element is processed lat.
                  - like balls in a tennis ball tube. Last ball to go in, comes out first.

                    LIFO approach is used as a queuing theory that refers to the way items are stored in types of data structures.

 ***********************
    What is  Messaging
 ***********************

  Messaging involved passing messages around, different from email and text, because it is intended for communication between software components , and not between people.

  A message usually contains a payload - whatever information the application sends: XML, JSON, binary data etc. Can add optional attributes and metadata to a message.

  A SQL or NOSql database often has a server that stores data. Similarly - a messaging server or service allows a place for the messages to be stored temporarily transmitted.

      ******************
        Queue and Topic
      ******************
        In a messaging service, the two main resources are the queue and the topic. The queue is like a buffer - you can put messages into a queue, and you can retrieve messages
        from a queue and the topic.

        A queue is like a buffer -  buffer: a data buffer is a region of a physical memory storage used to temporarily store data while it is being moved from one place to another -
          Think of it like a Train. Train = Buffer. Add people to train, take them off when you need to. Add Data to a buffer - remove/use them when you need it.

            - A software that puts messages into a  queue is called a Message Producer
            - the software that retrieves messages is called a Message Consumer/ Subscriber

    A Topic is like a broadcasting station - publish messages to a topic and anyone interested in these messages can subscribe to the topic.
    The interested parties are notified about the published messages.

      The software that broadcasts topics is called a Topic Publisher and the software that subscribes to broadcast is called a Topic Subscriber!



*************************************************************
            What is Pub/Sub Messaging
*************************************************************

  Publish/Subscribe messaging, or pub/sub messaging - is a form of asynchronous service - to - service communication used in serverless and micro services architectures.
    In a pub/sub model, any message published to a topic is immediately received by all of the Subscribers to the topic. Pub/sub messaging can be used  to enable event-driven architectures,
    or to decouple applications in order to increase performance, reliability and scalability.

  In a modern cloud architecture applications are decoupled into smaller, independent building blocks that are easier to develop, deploy and maintain.
  Publish/Subscribe (Pub/Sub) messaging provides instant event notifications for these distributed application.

  The publish Subscribe model allows messages to be broadcast to different parts of a system asynchronously. A sibling to a message queue - a message topic provides a
  lightweight mechanism to broadcast asynchronous event notifications, and endpoints that allow software components to connect to the topic n order to send and receive those messages.

  To broadcast a message a component called a publisher simply pushes a message to the topic.

  The subscriber to the message topic often perform different functions, and can each do something different with the message in parallel. The publisher doesn't need to know who is using the
  information that is broadcasting, and the subscriber don't need to know who the message comes from.
