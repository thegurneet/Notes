

******************************************
        FUNCTIONAL PROGRAMMING
******************************************
++ At the higher level, functiional programming is effectiely the interplay between decomposition ( breaking programs into small pieces) and composition (joining the pieces back together)
++ Reactive programming What is it???

IN Javascript Functions are values and you can exploit this by diving your code into small simple functions and composing them together using higher-order. 


First must learn the fundamental concepts on which Functional programming is based on: 

 - Declarative programming 
 - Pure Functions
 - Referential transparency
 - Immutability


    ------------------------------------------------
            Imperative vs Declarative programming
    ------------------------------------------------


    - Functional programming is a declarative type of programming. 
    - Object oriented programming is an Imperative type of programming. 

    Functional programming is done in a declarative style that's easy to reason about. this improves the overall readability 
    of the application and makes your code leaner through a combination of functions and lamda expression. 
    Functional programming treats functions as building blocks by relying on first-calss, higher-order 
    to improve the modularity and reusability of the code. 


    --------------------
        Immutability
    --------------------

        Functional programs aim for statelessness and immutability as much as possible.
        Stateless code has zero chance of changing or breaking global state.

        So! when we do: 
            var x = 5 ... x = 100 ... x = -1       = THIS IS NOT ALLOWED IN FUNCTIONAL PROGRAMMING. 
            When we say var X = 5   then X will stay as 5. No way of changing it. 
            So most values are const. 

        IN Functional programming we don't assign - We define! 
            X = 3  -> 'X is 3'

        In Functional programming, we start off with an immutable set of data as a single source of truth, 
        and then we use functions to combine this data piece by piece.  And transform it into useful information. 

    --------------------------------------
        Separation of Data and Functions
    --------------------------------------

        In OOP data is usually wrapped up in objects as member variables, 
        and the only way to access it is using the objects methods. 

        In Functions programming, this data is represented as simple arrays or hashes - JavaScript Objects. 
        In functioonal programming, functions are completely separate entities from the data that they operate on. 
        In order to operate on given data, the data has to be passed through as arguments to the function 
        rather than using the this keyword. 

    
    --------------------------------------
        First-Class Functions   (pure functions)
    --------------------------------------

        In object-oriented programming we treat data and functions as different types of entities. 

        Functional programming allows us to treat functions in a very similar way to how we would treat other values, 
        such as numbers, strings and objects. 
       
        In Object oriented programming, since functions and data are both defined in the same class - they tend to be
        tighly coupled -- the functions inside a given class usually reference the data they operate on directly. 
        So generally speaking you can't take a given function and remove it from the class it's in and still 
        have it work on it's own.

        In Functional programming: we design our functions specifily so they work in isolation. All the data that a function 
        needs to operate on is passed in through the argumments and the only thing that will change the output of the function
        is a change in the arguments. In otherwords - functions are not infulenced by any kind of internal or external state. 
        WE CALL THEM PURE FUNCTIONS. 




CORE CONCEPTS : 


1. Keeps functions and data separate 

2. Avoids state change and mutable data 

3. Treats functions as first-class citizen.


    ---------------------------------------------------
        Keep Functions and Data Separate
    ---------------------------------------------------

    ****** OOP ****
    class Person { 
        constructor(name, age){
            this.name = name;
            this.age = age
        }
        getOlder(){
            this.age += 1;
        }
    }

    ******  Functional ****

    const joe = { 
        name : "Joe", 
        age: 30 
    }

    function increaseAge(obj) { 
        const objCopy = _.cloneDeep(obj)
        objCopy.age += 1
        return objCopy
    }



    ---------------------------------------------------
        Avoids state change and mutable data 
    ---------------------------------------------------




    ---------------------------------------------------
        Treats functions as first-class citizen.
    ---------------------------------------------------








*******************************************************************
                 Higher-Order Functions
*******************************************************************


    ABSTRACTION: 
        -  In the context of programming, Abstraction hide details and gives us the ability to talk about problems at a higher (or more abstract) level. 

        Higher-order functions allow us to abstract over actions, not just values. They come in serveral form. 
            A Higher Order function has more than 2 level of functions to it. in its argument - it expects another function. OR it returns a function back to you. 
             Functions that operate on other functions, either by taking them as arguments or by returning them, are called higher-order functions.


        In all functional langauges, functions are values.

        We can assign functions to a variable. 

            var triple = function(x){
                return x * 3
            }
            var waffle = triple; 
            waffle(30)

        In functinal langauges, functions are values, just like strings or numbers functions can be assigned 
        to variables OR pass into other functions - Higher Order Functions.

        Higher order functions are good for COMPOSITION. The fact that we can take one function
        and put it into another function allows us to COMPOSE smaller functions into BIGGER functions. 

        One of the most common one is FILTER. Filter is a function on the array that accepts another function as its argument. 
        Which it will use to return a new filter verison of the array. 

        We can create smaller functions that only take care of one piece of logic. Then, we compose more complex functions by using different smaller functions.

        This technique reduces bugs and makes our code easier to read and understand.



                EXAMPLE ::::: 

            var animals - [
                {name:'Caro' , species:'dog'},
                {name:'poppy' , species:'dog'},
                {name:'fluffy' , species:'rabbit'},
                {name:'jonny' , species:'dog'},
                {name:'kito' , species:'cat'},
                {name:'sam' , species:'horse'},
            ]

            var dogs = animals.filter(function(animal){
                return animal.species === 'dog'
            })


            var isDog = function(animal){
                return animal.species === 'dogs'
            }

            var dogs = animals.filter(isDog);
            var otherAnimals = animals.reject(isDog)



            -----------
                Map
            -----------

                Like the filter, MAP is another higher-order function. Also like filter - it goes through an array, BUT unlike filter it doesn't throw the objects away. 
                Instead it TRANSAFORMS THEM. 


                var names = []; 
                for (var i=0; i < animals.length; i++){
                    names.push(animals[i].name);
                };

                VS 

                var names = animals.map(function(animal){
                    return animal.name;
                })

            -----------
                Reduce
            -----------

            Reduce is another Higher-Order function. 
            reduce is the multi tool on list transformations. It can be used to express any list 
            transformations. 



---------------------------------------------------
           Closures
---------------------------------------------------

    In Javascript, functions are not just functions. They are also closures. 
    What that means is that the function body has access to variable that are defined
    outside the function. 

    when we define a function that returns another function, the function that we returned still has access
    to the interally scope of the function that returned it. 



        ---------------------
            Spread Operator    {...}
        ---------------------    
    Spread Syntax allows an iterable such as an array expression or string to be expanded in places 
    where zero or more arguments ( for function calls) or elements (for array literal) are expected.      

            const person = { 
                name : 'Jimmy Smith', 
                age: 40, 
                hairColor: 'brown', 
                eyeColor: 'blue'
            }; 

            const careerData = { 
                title: 'developer',
                company: 'ABC Software'
            };

            const personWithCareerData = {...person,...careerData};
    
    When using the spread Operator, if the objects that we are spreading have a property name/s in common, 
    then the last one to be added will overwrite the one before it. 

        const numbers = [1,2,3,4,5]
        const newNumbers = [ 0 , ...numbers, 6]     = [0,1,2,3,4,5,6]        
        
        ---------------------
            Mapping   map()
        ---------------------

        myArray.map()
        The way we use map is by calling it on an array, and passing it some function we want to apply to each element in the array. 
        Map then returns another array that contains the return values of the function for each element in our original array. 
        SO it takes each element and maps it to the return value of the function we give it. 

        const numbers = [1,2,3,4,5];
            const addTwo = (x) => x + 2;
            const numbersPlusTwo = numbers.map(addTwo)
            console.log(numbersPlusTwo)



        ---------------------
            Filtering filter()
        ---------------------

        Filter is used when we want to find all the elements in an array that fit some kind of criteria.
         For example if we have an array of numbers and we want to get all the number from it that are even. 

         myArray.filter(element => { 
             ....
             return true; //or false
         })


        const numbers = [1,2,3,4,5];
        const isEven => (x) => x % 2 === 0 ;
        const evenNumbers = numbers.filter(isEven);
        // var evenNumbers = numbers.filter(x => x % 2 === 0 )  // var evenNumbers = numbers.filter((x) => { return x % 2 === 0 })
        console.log(evenNumbers)



        ---------------------
            Every/some
        ---------------------        

        Every and Some return a single Boolena, True or False. 

            Every : returns true if and ONLY if a given is true all the way through/ every single element in the array. 
                    So if we did a check to see if all the numbers are Odd - it would return false is every single value is not Odd. 
            
            Some  : return True if the condition is true for any in our Array. 
                    So it only return False if the condition is false for every element of the array. 


        ---------------------
            slice.().sort() Function
        ---------------------    

        The comparator function we pass to sort takes in 2 arguments, instead of one. The return value of this function for any two elements 
        determines the order in which these element will appear in relation to each other in the final array. 

        const sortedNumber = number.slice().sort((a,b)=>{
            //...
                return -1;  // a should come become b; 

            //...
                return 1;  // b should come before a; 

            //...
                return 0; // leave the elements in whatever order we found them; 

        });


        const mixedNumbers = [10,2,56,32,3,2,1,45,3];

            const ascending = (a,b) => { 
                if (a < b) return -1;
                if (a > b) return 1;
                return 0;
            }

        const sortedN = mixedNumbers.slice().sort(ascending);


        ---------------------
            Reduce Function 
        ---------------------   

        What reduce allows us to do it take an array and reduce it down to a single value. 
        So we could take an array of values and sum/subtract etc them together. 


        myArray.reduce((acc,element) => { 
            ...
            return ...
        },0)

        const numbers = [1,2,3,4,5]; 

        const sum = numbers.reduce((acc,element) => { 
            return acc + element; 
        },0)


---------------------------------------------------
           Partial Applications and Currying
---------------------------------------------------

    Partial Applications is when we take a function that has some number of arguments,
    and we fix some of those arguments to a set value. This gives us a function with less arguments than we had before. 

    This fixed function with less arguments can then be called from anywhere from within the code, and it will be 
    as if we had called the original function. 
    Patial application is a way to fit more general functions into more specfic ones.


-----------------------------
           Recursion 
-----------------------------

    Recursion is when a function calls itself. 

            const recursiveFunction = () => { 
                //do some stuff; 
                recursiveFunction(); 
            }

    CAN LEAD TO AN INFINTE LOOP IF NOT CAREFUL.




*******************************************************************
                            Objects 
*******************************************************************





