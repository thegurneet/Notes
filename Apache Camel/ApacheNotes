************************************************************************
**********************     Apache Camel   ******************************
************************************************************************

**************
Q: What is Apache Camel?

Apache Camel is a Mediation Framework
  - Mediation means an intervention between two parties to dispute something/send a message

Mediation is a structured process which enables two or more parties to identify, consider
and discuss their own and each others current and future needs.

Apache Camel Acts as a mediation layer between a legacy System and new System.
Apache Camel is a LightWeight framework and can be deployed in a Varity of containers - TomCat or Docker.

Apache Camel is a versatile open-source integration framework based on known Enterpirse Integration Patters.



Q: What is the Main Feature of Apache Camel

Main feature of Apache camel is that it provides us with a number of Components


**********************
Mediator Behaviour Design Pattern
**********************

Defines an Object that encapsulates how a set of Objects interact. Mediator promotes loose coupling
by keeping objects referring to each other explicitly , and let you vary their interaction independently

      - Tight Coupling : classes and objects are dependent on one another.
      - Loose Coupling : reducing dependencies of a class that uses a different class directly.


**********************
Enterprise Integration Pattern
**********************

~~~~
1. Message
~~~~

Is a unit of data. Data is packaged into 2 parts:

  1. Header:
        -Contains meta data about the message.
        -Could include origin of destination of the message

        - Key value pairs, where the key is a string and the value is an object.
  2. Body :
      - Contains the actual data payload.

~~~~
2. Message
~~~~
  Sends and Recieves messages between an application and a messaging system.

~~~~
3. Message Channel
~~~~
  Is how applications communicate with each other in a message based integration

~~~~
4. Pipes and Filters
~~~~
  Way to seperate concerns of message processing when the processing logic is complex.
  Pipes are implemented using message Channels.



**********************
Camel Context
**********************

  is a containers (of sorts) - Think of it as a camel runtime System
  which keeps all the pieces together.
        Runtime System : is an engine that translates a given programming language or languages into machine code.


  CamelContext provides access to many useful services - Notable: Components, type converters, registry endpoints,
  routes, data formats and languages.

                  CamelContext context = new DefaultCamelContext():

    context.addRoutes    Method of the camelContext accepts a RouteBuilder.

    means you could use your own customer class to Build Camel Routes. Most common -> RouteBuilder.classes

    Each  Java Statement that start with a *from*  method in the RouteBuilder creates a new route.

                                      from(" ").to(" ")

    from method tells camel to consume messages from an endpoint, and the *to* method tells camel to
    send messages to an endpoint.



**********************
Consumer Template & Producer Template
**********************

      ProducerTemplate producerTemplate = context.createProducerTemplate();

      ConsumerTemplate consumerTemplate = context.createConsumerTemplate();

ProducerTemplate can be used as an easy way of sending messages to a camel endpoint.
ConsumerTemplate makes consuming messages easy.

      ########
      Consumers
      ########

          Consumer wraps the payload and creates the exchange.

                  from.() is basically a consumer

          Two Types of Consumers:

            - Event Driven
            - Polling Consumer

              ~~~~~
              Event Driven
              ~~~~~
                - Consumer Reacts to events. Also called asynchronous consumers:
                      e.g JMS, Kafka

              ~~~~~
              Polling Consumers
              ~~~~~
                Are called synchronous consumers. Polls and reads the content from a source on a regular interval.
                  Example: Polling a directory on a regular interval in a FTP Server


      ########
      Producers
      ########

          An entity which can create and send a message to an endpoints

          Producer converts the exchange according to the endpoint behind the scenes.



**********************
Processor Interface
**********************

  in Camel is an important building block.

  from("").process(new Processor(){}).to("");

It gives us full access to the message exchange, letting us do pretty much whatever you want with the payload or headers.
The Processor is a core Camel concept that represents a node of capable of using, creating, or modifying an incoming exchange.

            ?noop=true;

  noop property configures the endpoint to leave the file as it is after processing - stops Camel creating an extra file/folder






*****************************
Marshalling/UnMarshaling
*****************************

~~~~~~~~~~~~~
Marshalling
~~~~~~~~~~~~~

Marshalling a message into another form, such as marshalling Java objects to XML, CSV or other well known

Have to add the pom dependencies:
  camel-xstream
  xom
  ezmiroh
  commons-beanutils


a syntax might be :

from().to().marshal().xmljson().to()



~~~~~~~~~~~~~
UnMarshalling
~~~~~~~~~~~~~

For performing the reverse operation - turns data from well known formats (XML, JSON, etc) into a message format.



a syntax might be :

from().to().unmarshal().xmljson().to()



*****************************
Camel gson
*****************************

dependencies required:

camel-gson


In Camel Gson, marshalling is a way of converting Java Obj to Json,
and Camel Gson unmarshalling is turning a json object into a java object

Student{
id=1,
name='Gurneet',
phonenumber='23452452'
}

to

{
"id": 1,
"name":"Gurneet",
"phonenumber":23452452
}




*********************
      ROUTE:
*********************
    - In Camel everything is a Route. In general, a camel route will have a Starting Point -> Ending Point.


          Example:
              in Camel a route starts from a from method and ends with a to method.
                  from("file:data/input?noop=true").to("file:data/output");

          A URI has 3 parts:
            URI :     "file:data/input?noop=true"

            PART 1:
                    file  -> component.
                      a file is a component in Apache Camel.

            PART 2:
                    data/input -> context path.
                      is the actual path where we are going to read the  file.

            PART 3:
                    ? -> Options
                      where we provide additional options for the URI>
                        noop=true -> options. Meaning do not perform any operations after you've copied files from it.


  *******************
    Simple Camel Route
  *******************

          CamelContext context = new DefaultCamelContext();                            // Every Camel application uses CamelContext. That is started and stopped.
                                                                                // Camel context is the runtime system and the loading container of all resources required for the execution of the routing.

          try {
             context.addRoutes(new RouteBuilder() {
                 @Override
                 public void configure() throws Exception {
                     from("file:data/input?noop=true").to("file:data/output");
               }
           });
             context.start();
              Thread.sleep(5000);
             context.stop();
          } catch (Exception e) {
             System.out.println("Exception is : " + e);
             e.printStackTrace();
          }

  *******************
   Logging in Camel
  *******************
        Maven dependencies : slf4j-api     &     slf4j-log4j12
        add log4j.properties



  **********************************
   How Camel transports the content?
  **********************************

      -  As soon as Camel starts a route (with the from method), it creates an EXCHANGE OBJECT.
      -  An Exchange object is something which will hold the whole data that is getting transported in that particular route.

          ************
            MESSAGE
          ************
            Consists of 3 things:    Header , Attachement, Body
            1. Header:
                  -Contains meta data about the message.
                  -Could include origin of destination of the message
                  - Key value pairs, where the key is a string and the value is an object.

            2. Attachements:
                  - Are optionals. Potentially used for scenarioes where you need to attach something as part of the message.

            3. Body :
                Type: Java.lang.object
                - Can hold any type of Object.

      - Transports the Exchange object from the from  method to the to method



***********************************************
            Camel Context
***********************************************
Camel context is the runtime system and the loading container of all resources required for the execution of the routing. Keeps everything together to allow the user to
execute the routing logic. When the context starts, also starts various components and endpoints and activates the routing rule.

Camel context contains:
   * The components and endpoints used in the Routing
   * type convertor used to transform a message of type to anther.
   * data formats used to define the format of a message body.
   * registry where Camel will look for the beans used in the routing.


        ***************
            Methods
        ***************
        Some of the methods are :                   https://camel.apache.org/maven/current/camel-core/apidocs/org/apache/camel/CamelContext.html

            - start()                                                               : to start
            - stop()                                                                : to shutdown (will stop all routes/components/endpoints etc and clear internal cache)
            - SuspendableService.suspend()                                          : to pause routing messages
            - SuspendableService.resume()                                           : to resume routing a message.

            - addComponent(String componentName, Component component)               : adds a component to the Context
            - addRoute(RoutesBuilder builder)                                       :








    ********************
          Tags
    ********************

    - from()   : could be either from(String uri) or from(Endpoint endpoint)
                uri - URI describes a camel Endpoint.     endpoint - a Camel Endpoint.
                Start a route with the File endpoint. Each file in the directory creates an Exchange that is put into
                the camel route.

    - routeId() : is used to assign each route a meaningful name, which will then show up in the management console or in the logs.
                  if we don't assign an ID, camel will auto-assign an ID using the scheme.
                  example: from("direct:update").routeId("update")  or from("file://target/inventory/updates").routeId("file").


    - transacted() : if the route is transacted, the transactional context is limited to run without one thread only.

    - doTry(), doCatch(), doFinally() :
                  A counterpart to the classic try..catch..finally block.
                  Can make the code compile and work at runtime as you would expect with a try and catch block.
                  The doTry..doCatch block has one limitation - it's only route scoped. The blocks only work in
                  the route in which  they're defined.

   - setHeader() : creates a header that exists within the current route. Headers are name-value pairs; the name is a unique,
                  case-insensitive string and the value is of type java.lang.object.

   - bean()     : Bean binding in Camel defines both which methods are invoked and also how the message is converted into
                  the parameters of the method when it is invoked.
                  .bean(new DataClass(), "map");    - run the class DataClass and the method map.


   - inOnly()   : a one-way message ( known as Event message). E.G JMS messaging is often one-way messaging.

   - InOut()    : A request-response message. E.G: HTTP- based transports are often request reply. Where a client
                  requests to retrieve a webpage, waiting for the reply from the server.

  - marshal()   : For marshalling a message into another form, such as marshalling Java objects to XML, JSON, CSV, EDI

   -unmarshal() : For performing the reverse operation, which turns data from well-known format back into a message.
