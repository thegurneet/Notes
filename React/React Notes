************************************************************************
**********************     REACT   *************************************
************************************************************************

React is a JavaScript Library for building User Interfaces (UI).


*********************************
What is a Single Page Application
*********************************
Single HTML page - inject all your Javascript components.


 In the past JavaScript performance was slow - Every page was coming from a server.
 Everytime something was clicked on - a new request was made to the server from the browser, and then
 the browser would subsequently load the new page.

 NOW HOWEVER, JavaScript intercepts the browser events and instead of making a new request to the server that then
 returns a new document, the client requests some JSON or performs an action ON the server. BUT the page the user see's is never
 NEVER completely wiped away.

  *********
    PROS:
  *********
    SPA are much faster for the USER, because instead of waiting for the client server communication to happen
    and wait for the browser to  re-render the page - you get instant feedback..


****************
What React is
****************
  Is a JavaScript library Created by Facebook.
  Is a User Interface (UI) Library.
  Is a tool for building UI components.


*********************************************************************
              Single Page Application vs Multi Page Applications
*********************************************************************

  Single Page Application

    - Only One HTML Page, Content is (re)rendered on Client
    - Usually everything is managed with JS with React.
    - The whole page is made of components/ rendered and handled by JS


  Multi Page Application

    - Multiple HTML Pages, Content is rendered on Server.
    - React might be used for widgets on individual pages.








  **************************        **************************        **************************
          JSX                                 JSX                             JSX
  **************************         **************************       **************************
  Like an XML/HTML like syntax used by React - extends ECMAScript.
  Intended to be used by preprocessors (like Babel) to transform HTML like text found in Javascript files
  into standard JavaScript objects.

  JSX is not valid JavaScript. Web Browsers can't read JSX. It has to be complied. A JavaScript compiler will translate any JSX into regular JavaScript.

        ******************
          JSX element
        ******************

            basic units of JSX is called a JSX element.

            an EXAMPLE:
             <h1> Hello world </h1>

            Looks like HTML. However you'll find this in a JavaScript file.


  JSX elements are treated as JavaScript expressions. They can go anywhere that JavaScript expressions can go.
  So JSX elements can be stored in variables, passed into functions or even stored in an Object/Array.

      EXAMPLE:
      several JSX elements stored in an Object.

      const myTeam = {
        <li>Football Team</li>,
        striker:<li> Gurneet</li>,
        goalKeeper: <li> Josh</li>
      };


  JSX elements can have attributes - like HTML elements. A name followed by a value (the value should be wrapped in quotes).

  EXAMPLE:
  my-attribute-name = "my-attribute-value";

  EXAMPLE:
    const title = <h1 id="title"> Introduction to React <h1>


  You can nest JSX elements inside of other JSX elements. Just like in HTML.
    EXAMPLE:
    (
      <a href="https://www.example.com">
        <h1>Click me!</h1>
      </a>
    )

    IF JSX expression takes up more than one line, then it must be wrapped in parentheses. And then these can be saved as Variables.

    const theExample =     (
                              <a href="https://www.example.com">
                                <h1>Click me!</h1>
                              </a>
                            );



    A JSX expression must have exactly one outermost element!

    So we can't have:

    const theExample = (
      <h1> Hello World </h1>
      <p>  hello paragraph </p>
    )

    JSX expressions must have the same start tag and end tag. JSX now sees <h1> to start with and </p> to end with. WRAP IT WITH A <div>


    **************************        **************************        **************************
            Render                             Render                             Render
    **************************         **************************       **************************

    ReactDOM.render();

    import ReactDOM from 'react-dom';

    ReactDOM is the name of a JavaScript library.
    ReactDOM.render() is the most common way to render JSX. It takes a JSC expression, creates a corresponding tree of DOM nodes,
    and adds that tree to the DOM.

    This is the way to make a JSX expression appear onscreen.

    ****************
    ClassName vs Class
    ****************

in HTML, it's common to use class as an attribute name:
      <h1 class="big"> Hey</h1>

HOWEVER in JSX , we can't use class. We have to use className;

    <h1 className="big"> Hey <h1>

When JSX is rendered, JSX className attributes are automatically rendered as class attibute;



****************
Self-Closing Tag
****************
 When you write a self-closing tag in HTML, it is optional to include a forward-slash immediately before the final angle-bracket:
      <br />   or <br>        fine in HTML.

  However in JSX you have to include the slash. If you write a self closing tag in JSX and forget the slash, you will raise an error.




  ****************
  Variables in JSX
  ****************

  When we inject JavaScript into JSX, that JavaScript is part of the same environment as the rest of the JavaScript in the file.

  That means, we can access variables while inside of a JSX expressions, even if those variables were declared on the outside.



  ****************
  Event Listeners in JSX
  ****************

  JSX elements can have event Listeners, just like HTML elements can. Programming in React means constanlty working with event listeners;

  We can create an event listener by giving a JSX element a special attribute

          <img onClick={myFunc} />


  - An event listener attibute's name should be somthing like onClick or OnMouseOver: the word on, plus the type of event that you're listening for.
  - An event listener attribute's value should be a function. The above example would only work if myFunc were a valid function that had been defined elsewhere:

**************************
  Rendering content through the use of ReactDOM.render()
**************************


**************************
  Breaking a Component Down
**************************


**************************
    Props
**************************

- React ways of passing data between components
- React data binding is uni-directional - data only flows Down
- Props are immutable(read only)
Single strict rule:
  - all React components must act like pure functions with respect to their props.

- Props includes data that we give to a component

**************************
    State
**************************

- Similar to Props, except it's private and fully controlled by the component.
- Describes the component and what data it holds/look after.
- Never modify state directly, instead call setState();

- setState calls are asynchronous - don't expect state to be immediately updated.

- setState causes state in the component to be merged(using shallow merge).

- State includes data that is local or private to that component. Other Components cannot access that state.


**************************
  Lifecycle events
**************************


**************************
  Fetching Data from external Api
**************************


**************************
  Conditional Rendering
**************************


**************************
  Routing
**************************




************************
COMPONENTS
************************

The Heart of a React application.

The component is essentially a piece of the User Interface. So when we build an App with React
we build a BUNCH of independent, isolated and reusable Components, and then compose them to build
complex  user interfaces.

Every React application has atleast one Root Component - this represents the internal application and
contains other child components .

So every React Component is a tree of Components.

- A Component looks like HTML templates (actually JSX)
- Contain 'state' (data or UI state)
- They also can contain JavaScript for functionality





What is a single page application?

Single HTML page - inject all your Javascript components.


What is React?
Library for building user interface

what does ReactDOM.render(..) do?
How many arguments does it take?
What is JSX?






      ################################
      Functional Component:
      ################################
          Mainly responsible for rendering UI. 

          Functional Components are basic JavaScript Functions. These are typically arrow functions but can also be created with the regular function keyWord. 
          Known as 'stateless' components as they simply accept data and disaplay them in some form. - responsible for UI. 

          -React lifecycle methods cannot be used in functional components. 
          -There is no render methods used in functional components
          -These are mainily responsible for UI and are typically presentational only (eg. Button)
          
          - Can accept and use props. 

          - SHOULD be favoured if you do not need to make sure of React state. 


          const Person = (props) =< (
              <div>
                <h1> Hello, {props.name}</h1>
              </div> 

          )

      ################################
      Class Based Components:
      ################################

        Class components make use of ES6 class and extends the Component class in React. 
        - Called Stateful componenets as they tend to implement logic and state. 
        - React lifecycle methods can be used inside class components.
        - Can pass props down to class componenets and access them with the this.props. 


            class Person extends Component { 
              constructor(props){
                super(props);
                this,state = { 
                  myState: true;
                }
              }


              render() { 
                return(
                  <div>
                    <h1> Hello Person<h1>
                  </div>
                )
              }
            }




      _______________________
      Conclusion 
      -----------------------

        - Should use functional components if we are writing a presentational component which doesn't have its won state or needs to access a lifecycle hook. 
        Otherwise you can stick to class components to take a look into the library recompose which allows us to write functional components and enhance them with 
        state or lifecycle hooks. 










next week:  props & event handling.





###### TO DO#####


Create my own Currency convertor in ES5 and then using ES6.
Create my own Currency convertor in React




*******************************************************************************************************************************
                                            Planning a React App
*******************************************************************************************************************************

1. Create a mockup — Either by using a design tool or pen and paper.

2. Break the UI into components — Draw boxes around every component in your mockup.
   Use the single responsibility principle to identify what should be its own component and not.

3. Arrange all components in a hierarchy — Create a hierarchy by identifying components that are nested inside each other. 
  This will help you to implement data flows later on.

4. Define where state should live — Try to have as few stateful components as possible. Best would be to encapsulate state 
  responsibility in a single component at the very top of your previously created hierarchy.

*******************************************************************************************************************************
                                            Organizing A React Project
*******************************************************************************************************************************


1. Have a consistent, though-out folder structure — Look for structuring patterns that are applicable to your project and be consistent with it.

2. Write functional components if possible — Rule of thumb: If your class-based component only has a render method, make it a functional component.

3. Use CSS modules — Don’t worry about same class names within your project by scoping classes locally to a component.