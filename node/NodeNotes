


      "A JavaScript runtime built on Chrome's V8 JavaScript engine. Node uses an  event-driven, non-blocking model that makes it LightWeight
      and efficient. Node.Js package ecosystem, npm , is the largest ecosystem of open source libraries in the world. "

NODE  JS IS:
    - a platform to allow us to run JavaScript on a computer/ server
    - Read, delete and update files
    - Easily communicate with a database


JavaScript Engine V8 engine.

  - Computer doesn't understand JavaScript, it switches it into machine code.
  - V8 is Googles opens source high-performance JavaScript and WebAssembly engine. Written in C++ - used in Chrome and Node.JS
  - Node.js is written in C++, gets complied down to machine code.



##################################
    ASYNCHRONOUS & SYNCHRONOUS
#################################

    Synchronous basically means that you can only execute one thing at a time.
    Asynchronous means that you can execute multiple things at a time and you don't have to finish executing the current thing in order to move on to next one

    SYNCHRONOUS : The code runs line by line as it appears in the code. 
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                    const second = () => { 
                        console.log('Second');
                    }

                    const first = () =>  { 
                        console.log('first thing'); 
                        second(); 
                        console.log('End'); 
                    }

                    first();
                    second(); 

                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~




    ASYNCHRONOUS : 

    Node is Asynchronous - so it only runs on one thread. 

            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                const second = () => { 
                    setTimeout(()=>{
                        console.log('Async Here')
                        console.log('Second');
                    }, 2000)
                }

                const first = () =>  { 
                    console.log('first thing'); 
                    setTimeout(()=>{
                        console.log('End'); 
                    }, 2000)
                    second();      
                }

                first();

            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    E.g : Lets suppose we select an image from the DOM and pass it into a Process function. The function will take saome time to process the image, and we 
          dont want the code to have to wait.  So we don't want to stop while the image is processing, because that would be terrible in some situations.
          What we do here is to also pass in a Callback function, that we want to be called as soon as the function is done processing.

                AND just like that we have created Asynchronous code. 

        - Allow asynchronous functions to run in the 'background';
        - Pass in callbacks that run once the frucntion has finsihed it's work 
        - Move on Immediately: Non-blocking!


    There are different patterns for Asynchronous coding. 


        When we have callback inside of a callback inside of a callback..... we get CALLBACK HELL!!!  PYRAMID OF DOOM!

    -----------------------
    CALLBACK PATERNS 
    -----------------------
        - A callback is a block of instruction wrapped in a function to be called when an asynchronous call has completed. 
        - A callback is a function called at the completion of a given task; this prevents any blocking and allows other code to be run in the meantime. 

        - call back is always an Arrow function!

        With Synchronous programming - code can be blocking - if one function takes too long, it blocks the whole program from continuing until its done. 
        Node.js - being an asynchronous platform stops that. It doesn't wait around and moves on while that stupid blocking function does it's stuff. 

        Typical convention for asynchronous functions: 
        -----------------------------------------------------------------------
        |    function asyncOperation ( a, b, c, callback ) {                    |
                // ... lots of hard work ...                                   
        |        if ( /* an error occurs */ ) {
                    return callback(new Error("An error has occurred"));        |
        |        }
                // ... more work ...
                callback(null, d, e, f);    
        |    }                                                                  |
    
            asyncOperation ( params.., function ( err, returnValues.. ) {
        |       //This code gets run after the async operation gets run         |
        |    });
        -----------------------------------------------------------------------


##########################################################################################################################################################           
    -----------------------
     PROMISES 
     -----------------------
     https://medium.com/quick-code/javascript-promises-in-twenty-minutes-3aac5b65b887
##########################################################################################################################################################    

        - Promises can be vaguely defined as ' proxy for a value that will eventually become available ' - can be used both synchronous and asynchronous code flows.  
        - A promise is literally just a plain old object.   

        - Promises solve the Callback hell issue. 

        - A Promise is an object that can be used to represnt the eventual completion of an asynchronous operation.

        - Object that keeps track about whether a certain event has happened already or not. 
        - If it does happen, then it determines what happens after the event has happened. 
        - Implements the concept of a future value that we're expecting. 

        ~~~~~~~~~~~~~~~~
            States: 
        ~~~~~~~~~~~~~~~~
            A Promise can have different states: 
                - Pending                  =  before the event has happened. Default state
                - Fulfilled                = 
                - Rejected
                - Settled / Resolved.      =  after the event has happened.    
                        - after the event: 
                            - Fulfilled || Rejected. 


            Essentially a promise a returned object to which you attach callbacks, instead of passing callbacks into a function.                 

                    
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            Consumer: then,catch,finally 
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            a Promise object serves as a link between the consuming functions - that recieve the result or error. The Consuming functions can be used using : 
                .then()
                .catch()
                .finally()
            
          ###  .then  ###
            Fundemental. 

            the .then function runs when the promise is resolved or rejected, and can be chained together. 

            dosomething.then(
                result => alert(result);
                error => alert(error);
            )

            if you have a promise, it will settle(resolve or reject) and THEN run the code that is passed as a callback to the then function. 
            The function that we pass to then automatically receives as an arguments the resulting data or error. 


         ###  .catch  ###
            if we're intrested in errors, then we can use null as the first argument : .then(null, errorHandlingfunction) OR we can use .catch(errorHandlingfunction);

            the call .catch(function(){}) is the same as .then(null, function(){})

        ###  .finally  ###

            Just like there’s a finally clause in a regular try {...} catch {...}, there’s finally in promises.

        .finally is a good handler for perfoming cleanup - e.g stopping our loading indicatiorsm as they are not needed anymore, no matter what the outcome is: 
            . finally handler has no arguments. 


       ----------------------------------------------
            2 ways to create a Promise from Scratch
       ----------------------------------------------

        We should know that a promise can be created using a function such as fetch, Promise.resolve, Promise.reject or Promise constructor function. 

            1. Promises can be created from scratch using :   new Promise(resolver). 
                    The resolver parameter is a function that will be used to settle the promise and it takes two arguments : resolve function and reject function. 


                let promisey = new Promise((resolve, reject) => { 
                    fs.readFile('veryImportantFile.txt' , (err,data) => { 
                        if(err){
                            reject err
                        } else { 
                            resolve(data)
                        }
                    })
                })


                promisey.then((ourStuff) => {  console.log(ourStuff) });



            2.  We will see that promises are supported and baked into other libraries for our application use.   SEQUELIZE. 
                    Model.findById(id)
                        .then((model)=>{
                            return model.update(someNewData)
                        })
                        .then((updatedModel) => { 
                            console.log('we have updated our model!, updatedMode)
                        })
                        .catch((error)=>{
                            console.log('oh no, something went wrong: ' , error)
                        })


            3.        another way...i added anyways.   
            function resolveUnderThreeSeconds (delay) { 
                return new Promise(function(resolve,reject){
                    setTimeout(resolve,delay)
                    setTimeout(reject,3000)
                })
            }
            resolveUnderThreeSeconds(2000);   //PromiseStatus becomes fulfilled after 2s
            resolveUnderThreeSeconds(7000);   //PromiseStatus becomes rejected after 3s

    -----------------------
    RESOLVING PROMISES 
    -----------------------
        the function passed to new Promise is called the exectuor. When a new Promise is created, it runs automatically. It contains the producing code, that should 
        eventually produce a result. 

        It arguments resolve and reject are callbakcs provided by JavaScript itself. 
        When the exectuor obtains the result, be it soon or late - doesn't matter, it should call one of these callbacks: 

            - resolve(value)    -- If the job finished successfully, with result value. 
            - reject(error)     -- If an error occurred, error is the error object.  

                ---------------------------------------------------------------------
                const delay = (seconds) => new Promise( function(resolve,reject){ 
                    setTimeout(()=>{
                        resolve([1,2,3,4])
                    },seconds*1000);
                }) 

                delay(1)
                    .then(function(data){
                        console.log('the delay has ended and returned: ' + data)
                    })
                --------------------------------------------------------------------



    REJECTING PROMISES

    THE PROMISIFY Function

    SEQUENTIAL EXECUTION

    PARALLEL EXECUTION

    CONCURRENT TASKS 





Global OBJECT

The global object is the window object.

The Global object in node is an Object called Global?
  Like the window object it allows us to use similar methods .


Function Expression

  var saybye = function(){
    console.log('bye')
  }'



  saybye();


  Every functionality Javascript has available to use in the Browser - we have it available in node.

*************
    Bring in modules   - REQUIRE
*************

        Node.js has a require function  - require()  - that helps us bring in modules.
        And these modules are built in node.

*******************
    Global Object
*******************

    a global object is a an object that always exists in the global scope.

    Gloabl objects are global in nature and available in all modules. Don't need to include these objects in your application.
            - rather they can accessed/used directly.
    These objects are:
        - modules
        - functions
        - strings
        - objects

    Some objects aren't actually in the global scope but in the module scope.

            List:

            *  __dirname            :  a string. Specifies the name of the directory that currently contains the code.
            *  __filename           : Specifies the filename of the code being executed.
            * Console
            * Process
            * Buffer

    - The window object is the Global Object in the Browser.
            e.g
                var foo = 'foobar';
                foo == window.foo; // true;

************************
    the Process Object
************************

the process object (an instance of the EventEmitter) is a global variable that provides information
on the currently running Node.js process.

What is an EventEmitter?
    - When something is done it runs an event/function.

    - When an EventEmitter instance faces any error, it emits an 'error' event.

    List of process Methods:

        * addListener(event, listener)
        * on(event,listener)
        * once(event,listener)
        * removeListener(event,listener)
        * removeAllListeners([event])
        * setMaxListeners(n)
        * listners(event)
        * emit(event, [arg1],[arg2])


************************
    ReadLine
************************

The readLine module provides a way of reading a datastream, one line at a time.

the syntax for including the Readline module in the application:

        var readline = require('readline);

 Once this module has been invoked, your node program will not terminate until you've closed the interface.
   *  rl.close();

    List of some of the Methods:

        * rl.setPrompt(prompt)
        * rl.prompt([preserveCursor])
        * rl.question(query,callback)
        * rl.pause()
        * rl.resume()
        * rl.close()
        * rl.write(data[,key])



***********************************
        Events and Custom Events
***********************************
        https://www.dev2qa.com/node-js-event-loop-and-custom-event-example/
        https://www.tutorialspoint.com/nodejs/nodejs_event_loop.htm

    Node.js is a single-threaded application, but it can support concurrecny via Events and Callbacks.
            Concurrency - terms means that two or more processes (or threads) run together, but not at the same time. Only once process executes at once.
            Parallelism - means that processes (threads) run in parallel; meaning they start at the same time and execute alongside each other at the same time.
    Node.js used events heavily and it one of the reasons why Node.js is fast compared to other technologies.

    **********
    Event driven programming
    **********

    As soon as node starts its server, it initiates its variables and declares functions and then simply waits
    for the events to occur.

    in an Event-driven application, there is generally a main loop that listens for events and then triggers a callback function
    when one of these events is detected.

    Events look quite similar to callbacks, the difference is the fact that callback functions are called when an asynchronous function
    returns its result. Where's event handling works on the observer pattern. The functions that listen to events act as Observers.

    *************
    EventEmitter
    *************
        All objects that emit events are members of EventEmitter class. These objects expose an eventEmitter.on() function
        that allow one or more functions to be attached to named events emitted by the object. When the EventEmitter object
        emits an event, all the functions attached to that specific event are called synchronoulsy.



    EventEmitter class is used to bind events and event-listeners:

    // Import events module
        var events = require('events');

    // Create an eventEmitter object
        var eventEmitter = new events.EventEmitter();

    // Bind event and event handler
        eventEmmiter.on('eventName' , eventHandler);

    // Fire an event
        eventEmitter.emit('eventName')




    ******************
            Module
    ******************

Node includes three types of modules:

    1. Core modules
    2. Local modules
    3. Third Party Modules

The core modules in Node.js include bare minimum functionalities of Node.js. These core modules are complied into its binary
distribution and load automatically when Node.js process starts. However, you need to import the core modules first in order to use it in
the application.

        Core Modules:

            *  http         :   http module includes classes, methods and events to create Node.js http server.
            *  url          :   url module includes methods for URL resoltuion and parsing.
            *  querystring  :   querystring module includes methods to deal with query string
            *  path         :   path module includes method to deal with file paths.
            *  fs           :   fs module includes classes, methods, and events to work with file I/O
            *  util         :   util module includes utility functions useful for programmers.


    ******************
        Local Module
    ******************

            Local modules are modules create locally in your Node.js application. These modules include different functionalities of your application
            in separate files and folder.

        In Node.js, module should be placed in a separate Javascript file.

        Example :

            var log = {

                cal: function (x, y){
                    console.log(x + y);
                }
            }

        module.exports = log;


    the module.export exposes the log object as a module. The module.exports is a special object which is included in every JS file in the Node.js
    application by default. Use module.exports or export to expose a function, object or variable as a module in Node.js






    ******************************************
          Creating a Server
    ******************************************



    *******************
      Response Headers
    *******************
              CLIENT      --->   Request: request + request headers          -----> SERVER
              CLIENT      <---   Response : response data + response header   <----- SERVER

      When we make a request to a server, and when we respond then as well as responding with some data or information, we
      also response with a header. And on the request we can send Request Headers.

        Headers are extra information about the request / response.



              ***********************
                  File Server
              ***********************


              ***********************
                  Clients and Servers
              ***********************

              When we browse a website on Chrome for instance - The browser is the client.
              If we do a search on the webiste for instance, the browser will send a REQUEST to
              the SERVER and the SERVER will handle the REQUEST and send back a RESPONSE to the Client.

              How do the two sides communicate with each other?

                      **********
                      PROTOCOLS
                      *********

                  A Protocol is a set of communication rules, that two sides agree to use when
                  communicating.
                  Germans vs French no good. Both know English, then they can communicate.

                  Each computer or server has an IP address. The client has to open a SOCKET between the Client
                  and Server.  33

                  When the structure of the information that is being sent has been decided, Eg HTTP,
                  the information is sent down the socket between the two computers via a Protocol known as
                  TCP.

                  The way the info is sent from a Client to server is via TCP. This splits the information into smaller 'packages'
                  and sends them along the socket.

                  Node JS lets use utalize this functionality.

                  The HandShake:
                      1. Computers agree on how to encrypt (set of rules), HTTPS/FTP.
                      2. Server sends certificate
                      3. Your computer say's 'start encrypting'
                      4. The server says 'start encrypting'
                      5. All messages are now encypted.


               PORTS
              - A program running on a computer can listen for requests sent to a particular port number.



          *************
              SERVER
          *************



          ****************
           HTTP Headers
          ****************

          Response headers:
                  - Content-types
                  - Status

              HTTP headers allow the client and server to pass additional information with the
              request and the response.




          **************************
              Streams and Buffers
          **************************

              Buffer :
                  - Temporary storage spot for a chunk of data that is being
                      transferred from one place to another.

                  - The buffer is filled with data , then passed along.
                  - Transfers small chunks of data at a time.


                  We have DATA and we need to pass the DATA on. But the DATA is toooo big to be passed along in one go. Because it will take to long
                  to be stored in memory.
                  So we have a buffer. We slowly start pushing stuff into the buffer(Temporary memory) and the from the buffer the data is passed on.

                  A stream is a stream of data that flows from one place to another. The Data flows down the stream, into the buffer, which collects small
                  chuncks of data together, then when the buffer is full, it chucks the data down the STREAM for it to be processed and sent to the client.

              Streams :

                  - Can create streams in Node.js to transfer data.
                  - Increase performance.
                  - Writeable Streams - allow nodeJs to write data to a stream by breaking it up
                  - Readable streams - allow node js to read data from a stream by breaking it up
                  - Duplex - can read and write to a stream.


              ------------
                  PIPES
              ------------
              Piping is a great mechanism in which you can read data from the source and write to the destination without
              managing the flow yourself.
              Within Node applications, streams can be piped together using the pipe() method, which takes two arguments:

                  - Required Writeable stream that acts as the destination for the data
                  - An optional object used to pass in options.

              Typical example of using pipes, if you want to transfer data from one file to the other.

                   example :
                          myReadStream.pipe(myWriteStream);



            ******************************
                        NPM         - Node Package Managers
            ******************************


            ******************************
                        Express
            ******************************

                - Easy and flexible routing syste
                - Integrates with many templating engines , for Front end purposes.
                - Contains a middleware framework



                ------------
                HTTP METHODS
                ------------
                    - Get           - app.get('route',fn)
                    - Post          - app.post('route',fn)
                    - Delete        - app.post('route',fn)
                    - PUT

                ----------------
                    Middleware
                ----------------
                    Code that runs between the response and the request.



                -------------------
                    Query Strings
                -------------------

                    A Query string is part of a URL - which assigns values
                    to a specified parameters.

                A web server can handle a HyperText Transfer Protocol request either by
                reading a file from its file system based on the URL path or by handling
                the request using logic that is specific to the type of resource.

                Typical URL containing a Query String is as:

                    http://example.com/over/there?name=ferret

                ?            - Used as a separator, not part of the query string. But it starts the query
                name=ferret  - this is a query
                &            - multiple query parameters are separated by the ampersand

                    http://example.com/path/to/page?name=ferret&color=purple

                Parse the request and pull the data.
