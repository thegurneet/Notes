
                                *************************************************************
                                                    Express Framework
                                *************************************************************

Express is a minimal and flexible Node.js web application framework that provides a robust set of features to develop web and mobile applications.

Following are some of the core features of Express framework:

  - Allows to set up middleware to response to HTTP Requests.
  - Defines a routing table which is used to perform different actions based on HTTP Method and URL.
  - Allows to dynamically render HTML pages based on passing arguments to templates.



body-parser   : This is a node.js middleware for handling JSON, Raw, Text and URL encoded form data.
cookie-parser : Parse Cookie header and populate req.cookies with an object keyed by the cookie names.
multer        : This is a node.js middleware for handling multipart/form-data.

npm install body-parser
npm istall cookie-parser
npm install multer



*****************************
  Starting a server Example
*****************************

var express = require('express');
var app = express();

app.get('/', function(req,res){
  res.send('Hello World');
});

app.listen(3000, ()=>{
  console.log('listening to port 3000');
});


  ********************
    Request & Response
  ********************

Express application uses a callback function whos parameters are request and response objects.

app.get('/', (request,response)=>{

});

- Request Object : The request object represents the HTTP request and has properties for the request query string, parameters, body, HTTP headers and so on.
- Response Object : the response object represents the HTTP response that an Express app sends when it gets an HTTP request.

  **************
    Basic Routing
  **************

var express = require('express');
var app = express();

// This responds with "Hello World" on the homepage
app.get('/', function (req, res) {
   console.log("Got a GET request for the homepage");
   res.send('Hello GET');
})

// This responds a POST request for the homepage
app.post('/', function (req, res) {
   console.log("Got a POST request for the homepage");
   res.send('Hello POST');
})

// This responds a DELETE request for the /del_user page.
app.delete('/del_user', function (req, res) {
   console.log("Got a DELETE request for /del_user");
   res.send('Hello DELETE');
})

// This responds a GET request for the /list_user page.
app.get('/list_user', function (req, res) {
   console.log("Got a GET request for /list_user");
   res.send('Page Listing');
})



app.listen(9000, ()=> {
console.log('listening to server 9000');
})
