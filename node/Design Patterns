

###################################
    What are Design Patterns
###################################

     Reusable, reliable solutions to problems that we face everyday in software development
    - Cataloged solutions
    - Reusable in different situations. 
    - Well documented
    - Language for collaboration 
    - Improve architecture 


    ---------------
        Design pattern Essentials 
    --------------
            - Pattern Name 
            - The Problem 
            - The Solution 
            - Consequences

    ---------------
        Anti-Pattern
    --------------
        Code smells if theres bad patterns. 
        Avoid:
        - Prototype on an instance
        - Callback hell
        - synchronous coding/executions.         

___________________
    Gang Of Four
-------------------

- Creational Patterns 
- Structrual Patterns 
- Behavioural Patterns 


    ~~~~~~~~~~~~~~~~~~~~~
    Creational Patterns 
    ~~~~~~~~~~~~~~~~~~~~~
        Singleton:
            Ensure a class has only once instance and provides a global proint of access to it.    
                USE:   module.exports = .... 
                and then import the class. 

        Prototype: 
            Specify the kinds of objects to create using prototypical instance and create new objects by 
            copying this Prototype.

        The Factory Pattern: 
            Define an interface for creating an object. But let subclasses decide which class to instantiate. 
            Factory Method lets a class defer instantiation to subclasses. 

        The Builder Pattern: 
            Seperate the construction of a complex object from its representation so that the same construction 
            process can create different representations. 



    ~~~~~~~~~~~~~~~~~~~~~
    Structrual Patterns 
    ~~~~~~~~~~~~~~~~~~~~~
        Adapter Pattern: 

        Proxy Pattern: 

        Composite Pattern: 

        Decorator Pattern: 


    ~~~~~~~~~~~~~~~~~~~~~~
    Behavioural Patterns 
    ~~~~~~~~~~~~~~~~~~~~~~

        Chain of responsibility:

        Command Pattern 

        Iterator Pattern:

        Observer Pattern: 

        Strategy Pattern: 



