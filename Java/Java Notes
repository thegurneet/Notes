************************************************************************
**********************     Java           ******************************
************************************************************************


/* */   - piece of code that works that defo needs explaining
/** */  - this class does alot of work - and this text can be extracted into documentation.
//      - single line comment.


##################################
    Object Oriented Programming
##################################

Organises a program arounds its data (that is, objects) and a set of well-defined interfaces to that data.
An Object Oriented program can be characterised as data controlling access to code.


    ***********************
    FOUR OOP Principles
    ***********************

OOP provides mechanisms that help you implement the Object-Oriented model:

  - Encapsulation       :   In Encapsulation, variables of a class will be hidden from other classes and can only be accessed through the methods of their current class. - Data Hiding.
  - Abstraction         :
  - inheritance         :   Inheritance is the process by which one class acquires the properties(data members) and functions(methods) of another class is called inheritance.
  - Polymorphism        :   Polymorphism is the ability of an object to make on many forms. polymorphism gives a way to use a class exactly like its parent so thereâ€™s no confusion with
                            mixing types. But each child class keeps its own methods as they are


 ************************
    Variable Scopes
 ************************

    ~~~~~~~~~~~~
    Static Scope
    ~~~~~~~~~~~~


    Instance Scope



    Local Scope

***********************************

Logical Or |
Logical and &
Logical Xor ^     ???????????? - Won't use.


Exceptions

***********************************

****************************
          OBJECTS
****************************

Real world objects have 2 Characterstics: State and Behaviour.

  - State     : might be the amount of RAM it has, operating system it's running, hard drive.
              : for an ant it - number of legs, age, color, conscious state. ( variable )

  - Behaviour : for a computer might be booting up, shutting down, outputting some sort of sound.
              : for an ant might be eating, sleeping, drinking, fighting, speak.   ( function )

              an Objects state is a stored in fields/variables and behaviour is shown via methods/functions.

  Now a software Object stores its state in fields and we know fields as variables -
  they expose it's behaviors with methods(functions).
  Methods operate on an object's internal state and serve as the primary mechanism for
  object-to-object communication..

  Object refers to a particular instance of a class, where the object can be a combination
  of variables, functions and data structures.


****************************
        Classes
****************************
  A Class is basically a blueprint.
    Naming Convention: HelloWorld, InputStream, ClassClass.


  public class Car {  }


  Above is the statement to create a new class with the name Car - it is the blueprint for a car.
  The Public keyword is an access modifier that we use to determine
  what access we want to allow others to have to this new class.

    - The word Public means unrestricted access to the Class.

    Other access modifiers we could use include:
      - private  : no other class can access that class.
      - protected: which allows classes in the current package to  access your class.

  Classes allow us to create variables - that can be seen and are accessible from
  anywhere within the class - These are known as : Class/Member Variables - but most
  commonly refer to them as fields.

  General use, when defining fields/variables - the access modifier should be private.

      public class Car {
        private int model;      - Variables/fields
        private int doors;      - Variables/fields
      }


    **********************
      Getters and Setters
    **********************
  Getters and setters encapsulate the fields of a class by making
  them accessible only through its public methods and keep the values
  themselves private


      public Class Car {
        private int doors;
        private String model;

        public void setDoors(int door){
          this.door = door;
        }

        public String getDoors(){
          return doors;
        }
      }



    **********************    **********************     **********************
        Constructor                Constructor                 Constructor
    **********************    **********************     **********************

    A Constructor initializes Objects.

    Constructors set the initial parameters or the initial values of fields, and any other
    initialization that is to be performed into one constructor.

    A Constructor is already created automatically by Java. The constructor is called when
    an object of a class is created.

    so when we do :

      Car porsche = new Car();

    the Car() bit is called the constructor.
    the new keyword creates the object of Class Car() and invokes the constructor;


    There are 3 types of Constructors:
      - Default
      - No args
      - Parameterized


      ***************
          Default
      ***************

      If a constructor is not implemented in the class, Java compiler inserts a default
      constructor into your code.  - Known as a default constructor, and is inserted into the code
      during compilation and only exists in .class file.

      If you implement a constructor, then you no longer receive a default constructor from
      Java compiler.


      *************************
          No-Arg constructor
      *************************


      A constructor with no arguments is known as a No-Args constructor.

      The signature is the same as a default constructor, however the body can
      have any code unlike default constructor where the body of the constructor
      is empty.

      Class Demo {
        public Demo(){
        }
      }

      public Demo(){        -> is the No-Arg constructor.
      }

      *******************************
          Parameterized Constructor
      *******************************

      Constructor with arguments.

      example:

        public class Employee {

          int empId:
          String empName;

          Employee(int id, int name){
            this.empId = id;
            this.empName = name;
          }

        }

      Key points:

        - Every class has a constructor whether its a normal class or an abstract class.
        - Constructors are not methods and they don't have any return type.
        - Constructor name should match with class name.
        - Constructor can use any access specifier, they can be declared as private also.
            Private Constructors scope is within the class only.

        - Like constructors method can also have name same as class name, but still they have return type
              , though which can identify them that they are methods not constructors.

        - If you don't implement any constructor within the class, compiler will do it for you.
        - this() and super() should be the first statement  in the constructor code.
        - Constructor overloading is possible but override is not possible.


        **********************    **********************     **********************
          Inheritance               Inheritance                   Inheritance
        **********************    **********************     **********************
          JAVA uses the word extends when inheriting.

          Inheritance is the process by which one class acquires the properties(data members) and functions(methods)
          of another class is called inheritance.

          AIM:
            the aim of inheritance is to provide the reusability of code, so that a class has to write only the unique features.

          There are two type of classes:
            - Child  Class
            - Parent Class

                **************
                  Child Class
                **************
                  The class that extends the features of another class is known as a child class/ sub class.

                ****************
                  Parent Class
                ****************
                    The class whos properties and funcionalities are used/inherited by another class is known as a
                    Parent Class or Super Class or Base Class.


            Inheritance is a process of defining a new class based on an existing class by extending it's common data members and methods.
            So Variables and Methods of the Parent class can be used in the child class.


          Types of Inheritance:
          ~~~~~~~~~~~~~~~~~~~~~~

          ######  Specaialisation inhertiance ...  ---- Each child class overrides a method inhertied from the parent in order to specialise the class in some way.

            - Single inheritance
            - Multilevel inheritance
            - Hierarchical Inheritance.
            - Multiple Inheritance.

                Single Inheritance :   refers to a child and parent class relationship where a class extends another class.

                Multilevel Inheritance : refers to a child and parent class relationship where a class extends the child class.
                                        Example:  Class C extends class B and class B extends class A.

                Hierarchical Inheritance : refers to a child and parent class relationship, where more than one child class extends the same parent.
                                      Example: classes B, C & D extends class A.

                Multiple Inheritance : Refers to the concept of one class extending more than one classes, which means a child class has two parent classes.
                                              JAVA DOES NOT SUPPORT THIS.


            SUPER keyword:
              the super keyword means is to call the constructor that if for the class we're extending from.

                      ~~~~~~~~~~~~~EXAMPLE~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                      ****ANIMAL CLASS *********
                      public class Animal{
                        private String name;
                        private int weight;

                            public int getWeight(){
                                return this.weight;
                              }

                            public String getName(){
                              return this.name;
                            }

                            public void setWeight(int weight){
                              this.weight = weight;
                            }

                            public void setName(String name){
                              this.name = name;
                            }

                        public void eat(){
                          sysout("Animal.eat() called");
                        }
                      }

                      *******DOG CLASS************
                      public class Dog extends Animal {

                          	private int legs;

                          	public Dog(String name, int weight, int legs) {
                          		super(name, weight);
                          		this.legs = legs;
                          	}

                            public void chew(){
                              sysout("Dog.chew() is called")
                            }

                          	@Override
                          	public void eat() {
                          		System.out.println("Dog.eat() called");
                          		chew();
                          		super.eat();
                          	}
                    }


                    @Override - it overrides the Parent Classes method. Because in this instance a Dog Chews when it eats.

                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



                    **********************    **********************     **********************
                          Override vs Overloading           Override vs Overloading
                    **********************    **********************     **********************

                    *************
                    OverLoading
                    *************
                      Method overloading means providing two or more separate methods in a class with the same name, but different parameters.
                          Method return type may or may not be different, and that allows us to reuse the same method name.

                          It reduces duplicated code and we don't have to remember multiple method names;
                          OverLoading happens inside a single class, but a method can also be treated as overloaded in the subclass of that class.

                          It is because a subclass inherits one version of the method from the parent class.

                        Method will be considered overloaded if both follow the following rules:
                            - Methods must have the same method name
                            - Method must have different parameters.

                            Example:
                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                          public class Sum {

                              public int sum(int x, int y){
                                return x + y;
                              }

                              public int sum(int x, int y, int z){
                                return x + y + z
                              }
                          }
                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                        *************
                        Overriding
                        *************
                          when we override a method, it's recommended to put @Override immediately above the method definition.
                            this is an annotation that the compiler reads and will then show us an error if we don't follow overriding rules correctly.

                          We can't override static methods, only instance methods.
                                  ~~~~~~~~~~~~~~~
                                  Static methods
                                  ~~~~~~~~~~~~~~~
                                    Are methods in Java that can be called without creating an object of class. They are referenced by the class name itself or reference to the Object of that class.
                                    They are declared using a static modifier.
                                    Static methods can't access instance methods and instance variables directly.
                                    Cannot use this keyword.

                                      Example :
                                            public static void geek(String name){
                                              sysout("this is a static method")
                                            }

                                            // Must have static modifier in their declaration.
                                            // Return type can be int, float, String or user defined data type.

                                  ~~~~~~~~~~~~~~~
                                  instance methods
                                  ~~~~~~~~~~~~~~~
                                    Are methods which require an object of its class to be created before it can be called. To invoke an instance method,
                                    we have to create an Object of the class in within which it defined.

                                    instance method can access instance methods and instance variables directly.
                                    instance methods can also access static methods and static variables directly.

                                    Example :
                                    public void geek(String name){
                                      sysout("this is an instansce method")
                                    }

                                        // return type can be int, float, String or user defined data type.

                          Return type can be a subclass of the return type in the parent class.
                          It can't have a lower access modifier.
                            For example - if the parent method is protected, then using private in the child is not allowed, but using public in the child would be allowed.


          **********************    **********************     **********************
            Composition               Composition                   Composition
          **********************    **********************     **********************

              Inheritance is an "is-a" relationship. Composition is a "has-a" relationship.

              Imagine we have three classes.
                - Monitor
                  - MotherBoard
                  - Resolution

              The Monitor has a resolution.

              imagine we had a House. Now a house HAS A kitchen, bedroom, bathoom etc.

              An example would look like:

                public Class House{

                  private Kitchen kitchen;
                  private Bedroom bedroom;
                  private LivingRoom livingRoom;

                  public House(Kitchen kitchen, Bedroom bedroom, LivingRoom livingRoom){
                    this.kitchen = kitchen

                    .. etc.
                  }
                }

                A class for kitchen:

                public Class Kitchen{
                  private Fridge fridge;
                  private int size;
                  private String color;

                    public Kitchen(Fridge fridge, int size, String color)
                      this.fridge = fridge...
                }

                and it will keep going on. The Kitchen or Fridge class is not being extended - because they're not children of the parent class.
                So through composition we can use them. .

**********************    **********************     **********************
  Encapsulation               Encapsulation                Encapsulation
**********************    **********************     **********************

  Encapsulation is a way of wrapping data ( variables) and methods together as a single unit.
  In Encapsulation, variables of a class will be hidden from other classes and can only be accessed through the methods of their current class. - Data Hiding.

      ~~~~~~~~~~~~~~~~~~~~~
      Encapsulation Rules:
      ~~~~~~~~~~~~~~~~~~~~~

            - Declare the variables of a class as private.
            - Provide public setter and getter methods to modify and view the variables values.

        By making a field private, we're making sure that our class is not accessible, or the  fields within.



**********************    **********************     **********************
  Polymorphism               Polymorphism                Polymorphism
**********************    **********************     **********************

  Polymorphism, the ability to take more than one shape.

  In Java, Polymorphism is the ability of an object to make on many forms. The most common use in OOP is:
    when a parent class reference is used to refer to a child class object.

    Any Java Object that can  pass more than one IS-A test - is considered to be Polymorphic.
    The only way to access an object is through a reference Variable. A reference Variable can be of only one type.

    The reference variable can reassigned to other objects provided that it is not declared Final.
    A reference variable can be declared as a class or interface Type:


              **********************    **********************     **********************
                    Arrays                      Arrays                 Arrays
              **********************    **********************     **********************

              Arrays are used to store multiple values in a single variable, instead of declaring separate variable for each value.


              Arrays in Java  allow you to store sequence of values of the same TYPE.
              For example and Array of integers, or an Array of Strings etc.

              To Declare an Array:

              int[] myIntArray = new int [10];     // this assigns 10 elements to the myIntArray array. so [_,_,_,_,_,_,_,_,_,]
              double[] myDoubleArray = new double[10];
              String[] myStringArray = new String[10];

              myIntArray[5] = 50;    // this saves 50 into the 5th element: so [_,_,_,_,_,50,_,_,_,_];


              Imagine we want to preset the values, because doing myIntArray[0] = 10, myIntArray[1] = 11; ---- will take forever.
              WE can do this:

              // this is us declaring a variable that holds an array of strings.
                    String[] cars;

                    String[] cars = { "BMW" , "AUDI", "Mazda"};

              ************
                Change
              ************
                To change a value at a specific location we do:
                cars[0] = "Honda";

                // So it will now be:    { "Honda" , "Audi" , "Mazda" };

                ~~~~~~~~~~~
                Length
                ~~~~~~~~~~~
                cars.length
                  output = 3;


              **************************
                  For-Each Loop
              **************************
                  A For each loop, that is used exclusively to loop through elements in arrays.

                      for (type variable : arrayName){
                        ...
                      }
                    SO.

                      for (String i : cars){
                        sysout(i)
                      }
                            This will print all the values in Cars.


            - An Array is a data structure that allows you to store multiple values of the same types into a single variable;
            - The default values of numeric array elements are set to Zero.
            - Arrays are zero indexed: an array with n elements is indexed from 0 to n-1. (so 10 elements index range is from 0-9);
            - if we try to access index that is out of range, Java will give us an ArrayIndexOutOfBoundsException, which means that the index is out of range/out of bounds.



    **************************            ***************************
    Reference Types vs Value Types         Reference Types vs Value Types
    **************************            ***************************

    An Array is a reference type.
    A String is also a reference type.

    When we create an Array - it references it in Memory.

    primitive types are:

    int, double and boolean.

    All primitive types are value types, as in they hold a value;

    An Array is a Reference type, and String is also a Reference type.

    A reference holds a Reference/an address to an object, but not the object itself.

          int[] myIntArray = new int[5];
          int[] anotherArray = myIntArray;

      So this variable myIntArray holds a reference/an address to an array in memory.

      if we make changes to anotherArray or myIntArray, the other one will change with it -
      because they both hold a reference to an array in memory;




      **************************            ***************************
            ArrayList                                 ArrayList
      **************************            ***************************
      An ArrayList Can Hold Objects. and An Array List is a class;

          An ArrayList is a resizable-array. In other words it handles the resizing automatically.
          It handles it all internally, not only maintains a size of how many elements, but also the capacity, the amount of memory that is reserved.
          As elements are added to an ArrayList, its capacity grows automatically - so don't have to worry about resizing - unlike an array.

          ArrayList is part of the collection Framework.
          ArrayList inherit AbstractList class and implements List interface

          ArrayList() : This constructor is used to build an empty array list.
          ArrayList(Collection c): This constructor is used to build and array List initialized with the elements from collection c.
          ArrayList(int capacity): This constructor is used to build and array list with initial capacity being specified.

              a few Methods in ArrayList:
                -forEach()
                -removeIf()
                -contains()
                -remove()
                -get()
                -set()
                -size()
                -removeAll()
                -isEmpty()
                -removeRange()



      **********************    **********************     **********************
          Interface                     Interface                Interface
      **********************    **********************     **********************

      Java includes a concept called interfaces. A java interface is bit like a class, HOWEVER a java interface can only
      contain signatures and fields. A java interface cannot contain an implementation of the methods, only the signature (name, parameter and exception) of the method.
      By default the variables are declared in an interface are public, static & final.


      *********
        USES
      *********
       - We can use Interfaces in Java as a way to achieve polymorphism.

       They are used for full abstraction. Since methods in interfaces do not have a body, they have to be implemented by the class before they can be accessed.
       A class that implements an interface, MUST implement all the methods of that interface.

       In Java you CANNOT extend more than one class. However you can implement more than one interface in  the class.

      The idea is to use an interface to provide a common behavior that can be used by several classes by having them all implement the same interface.
      - A way to standardize the way a part set of classes is used.


      *******************
      Nested interfaces
      *******************

      An interface which is declared inside another interface or class is called nested Interface. They are also known as inner interface.

      ******************
      Functional interface
      *******************

      An interface with a single abstract method and optionally, any number of default and static methods.

Key points:
  1.  We can't instantiate an interface in Java. Meaning we cannot create the object of an interface.
  2. Interface provides full abstraction as it can have abstract and concrete (methods with body) methods both.
  3. "implements" keyword is used by classes to implement an interface.
  4. All interface methods are by default abstract and public.
  5. Interface cannot be declared as  private or protected.
  6. Variable declared in an interface are public, static and final by default.








  **********************    **********************     **********************
      Lambda Basics             Lambda Basics              Lambda Basics
  **********************    **********************     **********************


**************
  Why Lambdas?
**************

    - Enables functional programming.
    - readable and concise code
    - Easier to use APIs and libraries
    - Enables support for parallel processing.


    *************************************************************
      Functional Programming vs Object Oriented Programming
    *************************************************************

    - Functional programming lets you right more readable, easier to write and more maintable code.

    In OOP everything is an Object. All code blocks are associated with classes and objects.
    You cannot have a piece of code that exists in isolation. - has to be part of a class or object.
