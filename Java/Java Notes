************************************************************************
**********************     Java           ******************************
************************************************************************


****************************
          OBJECTS
****************************

Real world objects have 2 Characterstics: State and Behaviour.

  - State    : might be the amount of RAM it has, operating system it's running, hard drive.
             : for an ant it - number of legs, age, conscious state.

  - Behaviour : for a computer might be booting up, shutting down, outputting some sort of sound.
              : for an ant might be eating, sleeping, drinking, fighting.

              an Objects state is stored in fields and behaviour is shown via methods.

Now a software Object stores its state in fields and we know fields as variables -
  they expose it's behaviors with methods(functions).
  Methods operate on an object's internal state and serve as the primary mechanism for
  object-to-object communication..


****************************
        Classes
****************************

  public class Car {  }

  Above is the statement to create a new class with the name Car.
  The Public keyword is an access modifier that we use to determine
  what access we want to allow others to have to this new class.

    - The word Public means unrestricted access to the Class.

    Other access modifiers we could use include:
      - private  : no other class can access that class.
      - protected: which allows classes in the current package to  access your class.

  Classes allow us to create variables - that can be seen and are accesible from
  anywhere within the class - These are known as : Class/Member Variables - but most
  commonly refer to them as fields.

  General use, when defining fields - the access modifier should be private.


    **********************
      Getters and Setters
    **********************
  Getters and setters encapsulate the fields of a class by making
  them accessible only through its public methods and keep the values
  themselves private


      public Class Car {
        private int doors;
        private String model;

        public void setDoors(int door){
          this.door = door;
        }

        public String getDoors(){
          return doors;
        }

      }

    **********************
      Constructor
    **********************

    Constructors set the initial parameters or the initial values of fields, and any other
    initialization that is to be performed into one constructor.

    A Constructor is already created automatically by Java.









              ************
                ARRAY
              ***********
      Arrays in Java  allow you to store sequence of values of the same TYPE.
      For example and Array of integers, or an Array of Strings etc.

    to Declare an Array:

      int[] myIntArray = new int [10];     // this assigns 10 elements to the myIntArray array. so [_,_,_,_,_,_,_,_,_,]
      double[] myDoubleArray = new double[10];
      String[] myStringArray = new String[10];

      myIntArray[5] = 50;    // this saves 50 into the 5th element: so [_,_,_,_,_,50,_,_,_,_];


      Imagine we want to preset the values, because doing myIntArray[0] = 10, myIntArray[1] = 11; ---- will take forever.
      WE can do this:

      int[] myIntArray = {10,11,12,13,14,15};   Java here sets the values and creates the elements. 6 elements.
      so if we do myIntArray[1] , we get 11;



      we can pass an Array to a method:

      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      public static void main(String[] args){
        int[] myIntegers = getIntegers(5);

        for (int i = 0; i < myIntegers.length; i++) {
          System.out.println("Element " + i + ", typed value was " + myIntegers[i]);
        }

      }

      public static int[] getIntegers(int number){
          int[] values = new int[numbers];

          for(int i=0; i<values.length; i++){
            value[i] = i+1;
          }

          return values;
      }
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~






****************************
Reference Type vs Value Type
****************************

  primitive types are:

  int, double and boolean.


  All primitive types are value types, as in they hold a value;

  An Array is a Reference type, and String is also a Reference type.

  A reference holds a Reference/an address to an object, but not the object itself.

        int[] myIntArray = new int[5];
        int[] anotherArray = myIntArray;

    So this variable myIntArray holds a reference/an address to an array in memory.

    if we make changes to anotherArray or myIntArray, the other one will change with it -
    because they both hold a reference to an array in memory;




            ************
              ARRAYLIST
            ***********



    An ArrayList is a resizable-array. In other words it handles the resizing automatically.
    As elements are added to an ArrayList, its capacity grows automatically - so don't have to worry about resizing.
